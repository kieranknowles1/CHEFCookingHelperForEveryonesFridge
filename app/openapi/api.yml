openapi: 3.0.0

info:
  title: CHEF Backend API
  version: 1.0.0

tags:
  - name: Barcode
  - name: Fridge
  - name: Ingredient
  - name: Recipe

servers:
  - url: http://localhost:3000/api/v1

paths:
  /barcode/{code}:
    get:
      tags: [Barcode]
      summary: Get the item associated with a given barcode
      parameters:
        - in: path
          name: code
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  productName: { type: string, example: GenericMart Chicken 1kg }
                  ingredient:
                    $ref: "#/components/schemas/Ingredient"
                  amount: { type: number, example: 1000 }
                required: [productName, ingredient, amount]
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags: [Barcode]
      # TODO: Require auth?
      summary: Insert a new barcode into the database
      parameters:
        - in: path
          name: code
          schema: { type: integer }
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productName: { type: string, example: GenericMart Chicken 1kg}
                ingredientId: { type: number, example: 12345 }
                amount: { type: number, example: 1000 }
      responses:
        "204":
          description: No Content

  /ingredient/all:
    get:
      tags: [Ingredient]
      summary: Get details of all ingredients
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Ingredient" }

  /recipe/{id}:
    get:
      tags: [Recipe]
      summary: Get a recipe by ID
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Recipe' }

  /fridge/{fridgeId}/ingredient/all/amount:
    get:
      tags: [Fridge]
      summary: Get all ingredients in the fridge
      parameters:
        - $ref: "#/components/parameters/fridgeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/FridgeIngredientEntry" }

  # TODO: Authentication
  /fridge/{fridgeId}/ingredient/{ingredientId}/amount:
    get:
      tags: [Fridge]
      summary: Get the amount of an ingredient in the fridge
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/ingredientId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: number, example: 100 }
    post:
      tags: [Fridge]
      summary: Update the amount of an ingredient in the fridge
      description:
        Set the amount of `ingredientId` in `fridgeId` to `amount`
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/ingredientId"
        - in: query
          name: amount
          description: Amount to set the ingredient to
          schema: { type: integer, example: 1 }
          required: true
      responses:
        "204":
          description: No Content

  /fridge/{fridgeId}/recipe/available:
    get:
      tags: [Fridge]
      summary: Get a list of available recipes
      description: Returns the IDs of all recipes that can be made with the available ingredients
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - in: query
          name: maxMissingIngredients
          description: Maximum number of ingredients that can be missing. Defaults to 0.
          schema: { type: integer, minimum: 0, example: 1 }
          required: false
        - in: query
          name: checkAmounts
          description: Whether to check that there is enough of each ingredient. Defaults to true.
          schema: { type: boolean, example: true }
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name: { type: string, example: Just Soup }
                    id: { type: integer, example: 1234 }
                    missingIngredientAmount: { type: integer, example: 1, description: Number of ingredients missing or not enough of }
                  required: [name, id, missingIngredientAmount]


components:
  parameters:
    fridgeId:
      in: path
      name: fridgeId
      schema: { type: integer, example: 1 }
      required: true
    ingredientId:
      in: path
      name: ingredientId
      schema: { type: integer, example: 1 }
      required: true

  responses:
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: array
            items: { $ref: "#/components/schemas/Error" }

  schemas:
    Error:
      type: object
      properties:
        message: { type: string, example: 'Invalid ID 1 for table blah'}
        name: { type: string, example: 'InvalidIdError' }
      required: [message, name]

    Unit:
      enum:
        - none
        - whole
        - ml
        - g
      example: g

    Recipe:
      type: object
      properties:
        id: { type: integer, example: 12345 }
        name: { type: string, example: 'Chicken Pie' }
        directions: { type: string, example: "The great thing about chicken pie is that you don't need to know how to make it, just get some chicken. And put it in a pie."}
        link: { type: string, example: 'example.com' }
        ingredients:
          type: array
          items: { $ref: '#/components/schemas/RecipeIngredientEntry' }
      required: [id, name, directions, link, ingredients]
      additionalProperties: false

    Ingredient:
      type: object
      properties:
        id: { type: integer, example: 12345 }
        name: { type: string, example: 'Chicken' }
        preferredUnit: { $ref: '#/components/schemas/Unit' }
        density: { type: number, example: 0.5 }
        assumeUnlimited: { type: boolean, example: false }
        # TODO: Substitutions
        # TODO: Weight
      required: [name, id, preferredUnit, assumeUnlimited]
      additionalProperties: false

    IngredientEntry:
      type: object
      properties:
        ingredient: { $ref: '#/components/schemas/Ingredient' }
        amount: { type: number, example: 250 }
      required: [ingredient, originalLine]
      additionalProperties: false


    RecipeIngredientEntry:
      allOf: [{ $ref: "#/components/schemas/IngredientEntry"}]
      properties:
        originalLine: { type: string, example: '250g of chicken' }

    FridgeIngredientEntry:
      allOf: [{ $ref: "#/components/schemas/IngredientEntry"}]
      required: [amount]
