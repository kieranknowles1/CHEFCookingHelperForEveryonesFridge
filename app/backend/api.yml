---
openapi: 3.0.0

info:
  title: CHEF Backend API
  version: 1.0.0

tags:
  - name: Metadata
  - name: Barcode
  - name: Fridge
  - name: Ingredient
  - name: Recipe
  - name: User

servers:
  - url: https://chefapi.knowles.freemyip.com/api/v1

paths:
  /mealtype/list:
    get:
      tags: [Metadata]
      summary: Get a list of all meal types, ordered by typical meal time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: string, example: "Dinner" }
        "429":
          $ref: "#/components/responses/TooManyRequests"

  /tag/list:
    get:
      tags: [Metadata]
      summary: Get a list of all tags
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Tag" }
        "429":
          $ref: "#/components/responses/TooManyRequests"

  /barcode/{code}:
    get:
      tags: [Barcode]
      summary: Get the item associated with a given barcode
      parameters:
        - in: path
          name: code
          schema: { $ref: "#/components/schemas/id" }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  productName:
                    type: string
                    example: GenericMart Chicken 1kg
                  ingredient:
                    $ref: "#/components/schemas/Ingredient"
                  amount: { type: number, example: 1000 }
                required: [productName, ingredient, amount]
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags: [Barcode]
      # TODO: Require auth?
      summary: Insert a new barcode into the database
      parameters:
        - in: path
          name: code
          schema: { $ref: "#/components/schemas/id" }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productName: { type: string, example: GenericMart Chicken 1kg }
                ingredientId: { $ref: "#/components/schemas/id" }
                amount: { type: number, example: 1000, minimum: 0 }
              required: [productName, ingredientId, amount]
              additionalProperties: false
      responses:
        "204":
          description: No Content

  /ingredient/all:
    get:
      tags: [Ingredient]
      summary: Get details of all ingredients
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Ingredient" }
        "429":
          $ref: "#/components/responses/TooManyRequests"

  /recipe/search:
    get:
      tags: [Recipe]
      summary: Search for recipes
      description: Search for recipes by one or more matching terms.
        Results are unordered, unless the `search` parameter is specified, in which case they are ordered by similarity to the search term.
      parameters:
        - in: query
          name: search
          description: Search term
          schema: { type: string, example: "chicken pie" }
          required: false
        - in: query
          name: minSimilarity
          description: Minimum similarity score, meaningless if `search` is not specified
          schema:
            type: number
            example: 0.5
            minimum: 0
            maximum: 1
            default: 0.5
          required: false

        - in: query
          name: availableForFridge
          description: If specified, only return recipes that can be made with the ingredients in the fridge
          schema: { $ref: "#/components/schemas/id" }
          required: false
        - in: query
          name: maxMissingIngredients
          description: Maximum number of ingredients that can be missing. Meaningless if `availableForFridge` is not specified.
          schema: { type: integer, minimum: 0, example: 1, default: 0 }
          required: false
        - in: query
          name: checkAmounts
          description: Whether to check that there is enough of each ingredient. Meaningless if `availableForFridge` is not specified.
          schema: { type: boolean, example: true, default: true }
          required: false

        - in: query
          name: limit
          description: Maximum number of results to return.
          schema: { type: integer, example: 10, minimum: 1, default: 10 }
          required: false
        - in: query
          name: mealType
          description: If specified, only return recipes of this type. By default, all recipes are returned.
          schema: { type: string, example: "Dinner" }
          required: false

        - in: query
          name: suitableForUsers
          description: If specified, only return recipes that are suitable for all of these users considering their dietary restrictions. By default, no restrictions are applied.
          schema:
            type: array
            items: { $ref: "#/components/schemas/id" }
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/SearchRecipe" }
        "429":
          $ref: "#/components/responses/TooManyRequests"

  /recipe/{recipeId}:
    get:
      tags: [Recipe]
      summary: Get a recipe by ID
      parameters:
        - $ref: "#/components/parameters/recipeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Recipe" }
        "404":
          $ref: "#/components/responses/NotFound"

  /fridge/{fridgeId}:
    get:
      tags: [Fridge]
      summary: Get data about a fridge
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/fridgeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer, example: 1 }
                  name: { type: string, example: "My Fridge" }
                  owner:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      name: { $ref: "#/components/schemas/username" }
                    required: [id, name]
                    additionalProperties: false
                required: [id, name, owner]
                additionalProperties: false
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /fridge/{fridgeId}/ingredient/all/amount:
    get:
      tags: [Fridge]
      summary: Get all ingredients in the fridge
      description:
        Returns a list of all ingredients in the fridge, with their amounts
        Does not include ingredients with amount 0
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/fridgeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/FridgeIngredientEntry" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /fridge/{fridgeId}/ingredient/{ingredientId}/amount:
    get:
      tags: [Fridge]
      summary: Get the amount of an ingredient in the fridge
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/ingredientId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: number, example: 100 }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags: [Fridge]
      summary: Update the amount of an ingredient in the fridge
      description: Set the amount of `ingredientId` in `fridgeId` to `amount`
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/ingredientId"
        - in: query
          name: amount
          description: Amount to set the ingredient to
          schema: { type: integer, example: 1, minimum: 0 }
          required: true
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /fridge/{fridgeId}/ingredient/{ingredientId}/modify:
    post:
      tags: [Fridge]
      summary: Modify the amount of an ingredient in the fridge
      description: Add or subtract `amount` from the amount of `ingredientId` in `fridgeId`
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/ingredientId"
        - in: query
          name: delta
          description: Amount to add or subtract from the ingredient
          schema: { type: integer, example: 1 }
          required: true
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /fridge/{fridgeId}/recipe/{recipeId}/maderecipe:
    post:
      tags: [Fridge]
      summary: Log that a recipe has been made and deduct the ingredients from the fridge
      description:
        Log that a recipe has been made and deduct the ingredients from the fridge.
        If there are not enough of an ingredient, its amount will be set to 0.
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/recipeId"
        - in: query
          name: users
          description: List of users who ate the recipe
          schema:
            type: array
            items: { $ref: "#/components/schemas/id" }
          required: true
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /signup:
    post:
      tags: [User]
      summary: Create a new user
      description: |
        Create a new user.
        Returns a token that can be used for future requests.
        Username and password will be taken from the HTTP Basic Authentication header.
      security: [Basic: []]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string, example: "abc123" }
                  userId: { $ref: "#/components/schemas/id" }
                required: [token, userId]
                additionalProperties: false
        "400":
          $ref: "#/components/responses/BadRequest"

  /login:
    post:
      tags: [User]
      summary: Authenticate as a user
      description: Authenticate as a user using HTTP Basic Authentication.
        Returns a token that can be used for future requests.
      security: [Basic: []]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string, example: "abc123" }
                  userId: { $ref: "#/components/schemas/id" }
                required: [token, userId]
                additionalProperties: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/{userId}:
    get:
      tags: [User]
      summary: Get a user by ID
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/{userId}/fridges:
    get:
      tags: [User]
      summary: Get all fridges a user has access to
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/BasicFridge" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /user/{userId}/history:
    get:
      tags: [User]
      summary: Get a user's recipe history, ordered by most recent first
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/userId"
        - in: query
          name: limit
          description: Maximum number of results to return. By default, 50 results are returned.
          schema: { type: integer, example: 50, default: 50, minimum: 1 }
          required: false
        - in: query
          name: recipe
          description: If specified, only return history entries for this recipe
          schema: { $ref: "#/components/schemas/id" }
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/MadeRecipe" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/{userId}/preference/tag/{tagId}:
    post:
      tags: [User]
      summary: Add or remove a tag from a user's banned tags
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/tagId"
        - in: query
          name: allow
          description: Whether to allow or ban the tag
          schema: { type: boolean, example: true }
          required: true
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /user/{userId}/preference/ingredient/{ingredientId}:
    post:
      tags: [User]
      summary: Add or remove an ingredient from a user's banned ingredients
      security: [Bearer: []]
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/ingredientId"
        - in: query
          name: allow
          description: Whether to allow or ban the ingredient
          schema: { type: boolean, example: true }
          required: true
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

components:
  securitySchemes:
    Basic:
      type: http
      scheme: basic

    Bearer:
      type: http
      scheme: bearer

  parameters:
    fridgeId:
      in: path
      name: fridgeId
      schema: { $ref: "#/components/schemas/id" }
      required: true
    ingredientId:
      in: path
      name: ingredientId
      schema: { $ref: "#/components/schemas/id" }
      required: true
    recipeId:
      in: path
      name: recipeId
      schema: { $ref: "#/components/schemas/id" }
      required: true
    userId:
      in: path
      name: userId
      schema: { $ref: "#/components/schemas/id" }
      required: true
    tagId:
      in: path
      name: tagId
      schema: { $ref: "#/components/schemas/id" }
      required: true

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

  schemas:
    id:
      type: integer
      example: 12345
      minimum: 1
      # MAX_SAFE_INTEGER, database does not support bigint
      maximum: 9007199254740991

    username:
      type: string
      example: "johnsmith"
      pattern: "^[^:]+$"
      maxLength: 255

    NameAndId:
      type: object
      properties:
        id: { $ref: "#/components/schemas/id" }
        name: { type: string, example: "My Fridge" }
      required: [id, name]
      additionalProperties: false

    ErrorList:
      type: object
      properties:
        status: { type: integer, example: 404 }
        path: { type: string, example: "/api/v1/path/to/endpoint" }
        errors:
          type: array
          items: { $ref: "#/components/schemas/Error" }
      required: [status, path, errors]
      additionalProperties: false

    Error:
      type: object
      properties:
        path: { type: string, example: "/params/id" }
        message: { type: string, example: "Must be integer" }
        errorCode: { type: string, example: "type.openapi.validation" }
      required: [path, message]
      additionalProperties: false

    Unit:
      type: string
      enum:
        - none
        - whole
        - ml
        - g
      example: g

    Tag:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Meat" }
        description: { type: string, example: "Contains meat" }
      required: [id, name, description]
      additionalProperties: false

    SearchRecipe:
      type: object
      properties:
        name: { type: string, example: Just Soup }
        id: { type: integer, example: 1234 }
        similarity: { type: number, example: 0.5 }
        missingIngredientAmount:
          type: integer
          example: 1
          description: Number of ingredients missing or not enough of. Only present if `availableForFridge` is specified.
      required: [name, id]
      additionalProperties: false

    Recipe:
      type: object
      properties:
        id: { type: integer, example: 12345 }
        name: { type: string, example: "Chicken Pie" }
        directions:
          type: string
          example: "The great thing about chicken pie is that you don't need to know how to make it, just get some chicken. And put it in a pie."
        link: { type: string, example: "example.com" }
        ingredients:
          type: array
          items: { $ref: "#/components/schemas/RecipeIngredientEntry" }
        mealType: { type: string, example: "Dinner" }
      required: [id, name, directions, link, ingredients, mealType]
      additionalProperties: false

    Ingredient:
      type: object
      properties:
        id: { type: integer, example: 12345 }
        name: { type: string, example: "Chicken" }
        preferredUnit: { $ref: "#/components/schemas/Unit" }
        density: { type: number, example: 0.5 }
        assumeUnlimited: { type: boolean, example: false }
        # TODO: Should i include tags here?
        # TODO: Substitutions
        # TODO: Include density in response
      required: [name, id, preferredUnit, assumeUnlimited]
      additionalProperties: false

    IngredientEntry:
      type: object
      properties:
        ingredient: { $ref: "#/components/schemas/Ingredient" }
        amount: { type: number, example: 250 }
      required: [ingredient]

    BasicFridge:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "My Fridge" }
        owner: { $ref: "#/components/schemas/NameAndId" }
      required: [id, name, owner]
      additionalProperties: false

    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { $ref: "#/components/schemas/username" }
        bannedTags:
          type: array
          items: { $ref: "#/components/schemas/Tag" }
        bannedIngredients:
          type: array
          items: { $ref: "#/components/schemas/NameAndId" }
      required: [id, name, bannedTags, bannedIngredients]
      additionalProperties: false

    RecipeIngredientEntry:
      allOf: [{ $ref: "#/components/schemas/IngredientEntry" }]
      properties:
        originalLine: { type: string, example: "250g of chicken" }
      required: [originalLine]

    FridgeIngredientEntry:
      allOf: [{ $ref: "#/components/schemas/IngredientEntry" }]
      required: [amount]

    MadeRecipe:
      type: object
      properties:
        id: { $ref: "#/components/schemas/id" }
        fridge: { $ref: "#/components/schemas/NameAndId" }
        recipe: { $ref: "#/components/schemas/NameAndId" }
        users:
          type: array
          items: { $ref: "#/components/schemas/NameAndId" }
        dateMade:
          type: string
          example: "2020-01-01T00:00:00.000Z"
          format: date-time
      required: [id, fridge, recipe, users, dateMade]
      additionalProperties: false
