---
openapi: 3.0.0

info:
  title: CHEF Backend API
  version: 1.0.0

tags:
  - name: Metadata
  - name: Barcode
  - name: Fridge
  - name: Ingredient
  - name: Recipe
  - name: User

servers:
  - url: http://localhost:3000/api/v1

paths:
  /mealtype/list:
    get:
      tags: [Metadata]
      summary: Get a list of all meal types, ordered by typical meal time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: string, example: "Dinner" }
        "429":
          $ref: "#/components/responses/TooManyRequests"

  /barcode/{code}:
    get:
      tags: [Barcode]
      summary: Get the item associated with a given barcode
      parameters:
        - in: path
          name: code
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  productName:
                    { type: string, example: GenericMart Chicken 1kg }
                  ingredient:
                    $ref: "#/components/schemas/Ingredient"
                  amount: { type: number, example: 1000 }
                required: [productName, ingredient, amount]
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags: [Barcode]
      # TODO: Require auth?
      summary: Insert a new barcode into the database
      parameters:
        - in: path
          name: code
          schema: { type: integer }
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productName: { type: string, example: GenericMart Chicken 1kg }
                ingredientId: { type: number, example: 12345 }
                amount: { type: number, example: 1000 }
      responses:
        "204":
          description: No Content

  /ingredient/all:
    get:
      tags: [Ingredient]
      summary: Get details of all ingredients
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Ingredient" }
        "429":
          $ref: "#/components/responses/TooManyRequests"

  /recipe/search:
    get:
      tags: [Recipe]
      summary: Search for recipes
      description: Search for recipes by one or more matching terms.
        Results are unordered, unless the `search` parameter is specified, in which case they are ordered by similarity to the search term.
      parameters:
        - in: query
          name: search
          description: Search term
          schema: { type: string, example: "chicken pie" }
          required: false
        - in: query
          name: minSimilarity
          description: Minimum similarity score, meaningless if `search` is not specified
          schema:
            { type: number, example: 0.5, minimum: 0, maximum: 1, default: 0.5 }
          required: false

        - in: query
          name: availableForFridge
          description: If specified, only return recipes that can be made with the ingredients in the fridge
          schema: { type: integer, example: 1 }
          required: false
        - in: query
          name: maxMissingIngredients
          description: Maximum number of ingredients that can be missing. Meaningless if `availableForFridge` is not specified.
          schema: { type: integer, minimum: 0, example: 1, default: 0 }
          required: false
        - in: query
          name: checkAmounts
          description: Whether to check that there is enough of each ingredient. Meaningless if `availableForFridge` is not specified.
          schema: { type: boolean, example: true, default: true }
          required: false

        - in: query
          name: limit
          description: Maximum number of results to return. By default, 10 results are returned.
          schema: { type: integer, example: 10 }
          required: false
        - in: query
          name: mealType
          description: If specified, only return recipes of this type. By default, all recipes are returned.
          schema: { type: string, example: "Dinner" }
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/SearchRecipe" }
        "429":
          $ref: "#/components/responses/TooManyRequests"

  /recipe/{recipeId}:
    get:
      tags: [Recipe]
      summary: Get a recipe by ID
      parameters:
        - $ref: "#/components/parameters/recipeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Recipe" }
        "404":
          $ref: "#/components/responses/NotFound"

  # TODO: Authentication for all fridge endpoints
  # TODO: Implement
  /fridge/{fridgeId}:
    get:
      tags: [Fridge]
      summary: Get data about a fridge
      parameters:
        - $ref: "#/components/parameters/fridgeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer, example: 1 }
                  name: { type: string, example: "My Fridge" }
                  owner: { $ref: "#/components/schemas/User" }
                required: [id, name, owner]
        "404":
          $ref: "#/components/responses/NotFound"

  # TODO: Authentication
  /fridge/{fridgeId}/ingredient/all/amount:
    get:
      tags: [Fridge]
      summary: Get all ingredients in the fridge
      description:
        Returns a list of all ingredients in the fridge, with their amounts
        Does not include ingredients with amount 0
      parameters:
        - $ref: "#/components/parameters/fridgeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/FridgeIngredientEntry" }
        "403":
          $ref: "#/components/responses/Forbidden"

  # TODO: Authentication
  /fridge/{fridgeId}/ingredient/{ingredientId}/amount:
    get:
      tags: [Fridge]
      summary: Get the amount of an ingredient in the fridge
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/ingredientId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: number, example: 100 }
    post:
      tags: [Fridge]
      summary: Update the amount of an ingredient in the fridge
      description: Set the amount of `ingredientId` in `fridgeId` to `amount`
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/ingredientId"
        - in: query
          name: amount
          description: Amount to set the ingredient to
          schema: { type: integer, example: 1 }
          required: true
      responses:
        "204":
          description: No Content

  # TODO: Authentication
  /fridge/{fridgeId}/recipe/{recipeId}/maderecipe:
    post:
      tags: [Fridge]
      summary: Log that a recipe has been made and deduct the ingredients from the fridge
      description:
        Log that a recipe has been made and deduct the ingredients from the fridge.
        If there are not enough of an ingredient, its amount will be set to 0.
      parameters:
        - $ref: "#/components/parameters/fridgeId"
        - $ref: "#/components/parameters/recipeId"
        - in: query
          name: users
          description: List of users who ate the recipe
          schema:
            type: array
            items: { type: integer, example: 1 }
          required: true
      responses:
        "204":
          description: No Content
        "403":
          $ref: "#/components/responses/Forbidden"

  # TODO: Authentication, implement
  /user/{userId}:
    get:
      tags: [User]
      summary: Get a user by ID
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          $ref: "#/components/responses/NotFound"

components:
  parameters:
    fridgeId:
      in: path
      name: fridgeId
      schema: { type: integer, example: 1 }
      required: true
    ingredientId:
      in: path
      name: ingredientId
      schema: { type: integer, example: 1 }
      required: true
    recipeId:
      in: path
      name: recipeId
      schema: { type: integer, example: 1 }
      required: true
    userId:
      in: path
      name: userId
      schema: { type: integer, example: 1 }
      required: true

  responses:
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorList" }

  schemas:
    ErrorList:
      type: object
      properties:
        status: { type: integer, example: 404 }
        path: { type: string, example: "/api/v1/path/to/endpoint" }
        errors:
          type: array
          items: { $ref: "#/components/schemas/Error" }
      required: [status, path, errors]

    Error:
      type: object
      properties:
        path: { type: string, example: "/params/id" }
        message: { type: string, example: "Must be integer" }
        errorCode: { type: string, example: "type.openapi.validation" }
      required: [path, message]

    Unit:
      type: string
      enum:
        - none
        - whole
        - ml
        - g
      example: g

    SearchRecipe:
      type: object
      properties:
        name: { type: string, example: Just Soup }
        id: { type: integer, example: 1234 }
        similarity: { type: number, example: 0.5 }
        missingIngredientAmount:
          type: integer
          example: 1
          description: Number of ingredients missing or not enough of. Only present if `availableForFridge` is specified.
      required: [name, id]

    Recipe:
      type: object
      properties:
        id: { type: integer, example: 12345 }
        name: { type: string, example: "Chicken Pie" }
        directions:
          {
            type: string,
            example: "The great thing about chicken pie is that you don't need to know how to make it, just get some chicken. And put it in a pie.",
          }
        link: { type: string, example: "example.com" }
        ingredients:
          type: array
          items: { $ref: "#/components/schemas/RecipeIngredientEntry" }
        mealType: { type: string, example: "Dinner" }
      required: [id, name, directions, link, ingredients, mealType]

    Ingredient:
      type: object
      properties:
        id: { type: integer, example: 12345 }
        name: { type: string, example: "Chicken" }
        preferredUnit: { $ref: "#/components/schemas/Unit" }
        density: { type: number, example: 0.5 }
        assumeUnlimited: { type: boolean, example: false }
        # TODO: Substitutions
        # TODO: Include density in response
      required: [name, id, preferredUnit, assumeUnlimited]

    IngredientEntry:
      type: object
      properties:
        ingredient: { $ref: "#/components/schemas/Ingredient" }
        amount: { type: number, example: 250 }
      required: [ingredient]

    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "John Smith" }
      required: [id, name]

    RecipeIngredientEntry:
      allOf: [{ $ref: "#/components/schemas/IngredientEntry" }]
      properties:
        originalLine: { type: string, example: "250g of chicken" }
      required: [originalLine]

    FridgeIngredientEntry:
      allOf: [{ $ref: "#/components/schemas/IngredientEntry" }]
      required: [amount]
